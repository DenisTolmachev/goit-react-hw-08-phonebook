{"version":3,"file":"static/js/325.bacafe97.chunk.js","mappings":"uXAIaA,EAAYC,EAAAA,GAAAA,GAAH,+CAITC,GAAaD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,gEAKVG,EAAQH,EAAAA,GAAAA,MAAH,qGAED,qBAAGI,MAAkBC,YAAYC,QACvC,qBAAGF,MAAkBG,OAAOC,aAI1BC,GAAQT,EAAAA,EAAAA,IAAOU,EAAAA,GAAPV,CAAH,wWAYE,qBAAGI,MAAkBG,OAAOI,SAInCC,EAAgBZ,EAAAA,GAAAA,IAAH,yGACf,qBAAGI,MAAkBG,OAAOI,SAM1BE,EAAab,EAAAA,GAAAA,IAAH,sGAGR,qBAAGI,MAAkBU,UAAUC,MACnC,qBAAGX,MAAkBG,OAAOC,aAG1BQ,GAAahB,EAAAA,EAAAA,IAAOiB,EAAAA,GAAPjB,CAAH,4DACZ,qBAAGI,MAAkBG,OAAOC,aACtB,qBAAGJ,MAAkBC,YAAYC,S,6ICrC5CY,EAAWC,EAAAA,KAAaC,MAAM,CAClCC,MAAOF,EAAAA,KAAaE,QAAQC,SAAS,sBACrCC,SAAUJ,EAAAA,KAEPG,SAAS,yBACTE,IAAI,EAAG,sDACPC,QAAQ,cAAe,qCAGfC,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAWjB,OACE,iCACE,SAAC,KAAD,kCACA,SAAC,KAAD,CACEC,cAAe,CAAER,MAAO,GAAIE,SAAU,IACtCO,iBAAkBZ,EAClBa,SAfe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACxBC,EAAO,CACXb,MAAOW,EAAOX,MACdE,SAAUS,EAAOT,UAEnBI,GAASQ,EAAAA,EAAAA,IAAUD,IACnBD,KAME,SAKG,SAAAG,GACC,IACEJ,EAOEI,EAPFJ,OACAK,EAMED,EANFC,QACAC,EAKEF,EALFE,OACAC,EAIEH,EAJFG,aACAC,EAGEJ,EAHFI,aACAC,EAEEL,EAFFK,WACAC,EACEN,EADFM,aAGF,OACE,UAAC,KAAD,CAAYX,SAAUW,EAAtB,WACE,SAAC,KAAD,CAAOC,QAAQ,QAAf,oBACA,SAAC,KAAD,CACEC,GAAG,QACHC,KAAK,QACLC,KAAK,OACLC,YAAY,mBACZC,MAAOhB,EAAOX,MACd4B,SAAUT,EACVU,OAAQT,EACRU,UAAWb,EAAOjB,OAASgB,EAAQhB,OAAS,UAE7CiB,EAAOjB,OAASgB,EAAQhB,QACvB,SAAC,KAAD,UAAgBiB,EAAOjB,SAGzB,SAAC,KAAD,CAAOsB,QAAQ,WAAf,uBACA,SAAC,KAAD,CACEC,GAAG,WACHC,KAAK,WACLC,KAAK,WACLC,YAAY,sBACZC,MAAOhB,EAAOT,SACd0B,SAAUT,EACVU,OAAQT,EACRU,UAAWb,EAAOf,UAAYc,EAAQd,UAAY,UAEnDe,EAAOf,UAAYc,EAAQd,WAC1B,SAAC,KAAD,UAAgBe,EAAOf,YAGzB,SAAC,IAAD,CAAQuB,KAAK,SAASM,SAAUb,EAAhC,0BAOR,UAAC,KAAD,mCACsB,SAAC,KAAD,CAAYc,GAAG,YAAf,2B,mBC7FfC,E,QAAYtD,GAAAA,IAAH,+CCatB,EAXc,WACZ,OACE,UAACsD,EAAD,YACE,SAACC,EAAA,EAAD,WACE,wCAEF,SAAC7B,EAAD","sources":["components/common/Form.styled.js","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.style.js","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field } from 'formik';\nimport { Link } from 'react-router-dom';\n\nexport const FormTitle = styled.h1`\n  text-align: center;\n`;\n\nexport const FormStyled = styled(Form)`\n  max-width: 500px;\n  margin: 0 auto;\n`;\n\nexport const Label = styled.label`\n  margin-bottom: 10px;\n  font-weight: ${({ theme }) => theme.fontWeights.bold};\n  color: ${({ theme }) => theme.colors.secondary};\n  height: 22px;\n`;\n\nexport const Input = styled(Field)`\n  width: 100%;\n  margin-top: 10px;\n  margin-bottom: 20px;\n  padding: 10px;\n  outline: none;\n  border: none;\n  border-radius: 3px;\n  border: 1px solid transparent;\n  box-shadow: rgb(0 0 0 / 20%) 0px 3px 1px -2px,\n    rgb(0 0 0 / 14%) 0px 2px 2px 0px, rgb(0 0 0 / 12%) 0px 1px 5px 0px;\n  &.error {\n    border-color: ${({ theme }) => theme.colors.error};\n  }\n`;\n\nexport const InputFeedback = styled.div`\n  color: ${({ theme }) => theme.colors.error};\n  margin-top: -15px;\n  font-size: 14px;\n  margin-bottom: 20px;\n`;\n\nexport const ChangeForm = styled.div`\n  margin-top: 20px;\n  text-align: center;\n  font-size: ${({ theme }) => theme.fontSizes.m1};\n  color: ${({ theme }) => theme.colors.secondary};\n`;\n\nexport const ChangeLink = styled(Link)`\n  color: ${({ theme }) => theme.colors.secondary};\n  font-weight: ${({ theme }) => theme.fontWeights.bold};\n`;\n","import { Button } from 'components/common/Button.styled';\nimport { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { loginUser } from 'store/auth/authOperations';\nimport * as yup from 'yup';\nimport {\n  FormTitle,\n  Input,\n  InputFeedback,\n  Label,\n  FormStyled,\n  ChangeForm,\n  ChangeLink,\n} from '../common/Form.styled';\n\nconst mySchema = yup.object().shape({\n  email: yup.string().email().required('No email provided.'),\n  password: yup\n    .string()\n    .required('No password provided.')\n    .min(8, 'Password is too short - should be 8 chars minimum.')\n    .matches(/(?=.*[0-9])/, 'Password must contain a number.'),\n});\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const user = {\n      email: values.email,\n      password: values.password,\n    };\n    dispatch(loginUser(user));\n    resetForm();\n  };\n\n  return (\n    <>\n      <FormTitle>–êccount login</FormTitle>\n      <Formik\n        initialValues={{ email: '', password: '' }}\n        validationSchema={mySchema}\n        onSubmit={handleSubmit}\n      >\n        {props => {\n          const {\n            values,\n            touched,\n            errors,\n            isSubmitting,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n          } = props;\n\n          return (\n            <FormStyled onSubmit={handleSubmit}>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"text\"\n                placeholder=\"Enter your email\"\n                value={values.email}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                className={errors.email && touched.email && 'error'}\n              />\n              {errors.email && touched.email && (\n                <InputFeedback>{errors.email}</InputFeedback>\n              )}\n\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                value={values.password}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                className={errors.password && touched.password && 'error'}\n              />\n              {errors.password && touched.password && (\n                <InputFeedback>{errors.password}</InputFeedback>\n              )}\n\n              <Button type=\"submit\" disabled={isSubmitting}>\n                LogIn\n              </Button>\n            </FormStyled>\n          );\n        }}\n      </Formik>\n      <ChangeForm>\n        Don't have account? <ChangeLink to=\"/register\">SginUp</ChangeLink>\n      </ChangeForm>\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 20px 50px;\n`;\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { Helmet } from 'react-helmet';\nimport { Container } from './LoginPage.style';\n\nconst LogIn = () => {\n  return (\n    <Container>\n      <Helmet>\n        <title>LogIn</title>\n      </Helmet>\n      <LoginForm />\n    </Container>\n  );\n};\n\nexport default LogIn;\n"],"names":["FormTitle","styled","FormStyled","Form","Label","theme","fontWeights","bold","colors","secondary","Input","Field","error","InputFeedback","ChangeForm","fontSizes","m1","ChangeLink","Link","mySchema","yup","shape","email","required","password","min","matches","LoginForm","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","resetForm","user","loginUser","props","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit","htmlFor","id","name","type","placeholder","value","onChange","onBlur","className","disabled","to","Container","Helmet"],"sourceRoot":""}