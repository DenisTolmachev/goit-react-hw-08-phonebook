{"version":3,"file":"static/js/62.8ed2d1ea.chunk.js","mappings":"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","sources":["components/common/Button.styled.js","components/common/Form.styled.js","store/contacts/contactsSelectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.style.js","pages/ContactsPage/ContactsPage.jsx","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Button = styled.button`\n  padding: 10px 10px;\n  margin: 5px 10px;\n  font-size: ${({ theme }) => theme.fontSizes.m};\n  text-transform: capitalize;\n  background-color: ${({ theme }) => theme.colors.primary};\n  color: ${({ theme }) => theme.colors.white};\n  border: none;\n  border-radius: 5px;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0s;\n  box-shadow: rgb(0 0 0 / 20%) 0px 3px 1px -2px,\n    rgb(0 0 0 / 14%) 0px 2px 2px 0px, rgb(0 0 0 / 12%) 0px 1px 5px 0px;\n  cursor: pointer;\n  :hover {\n    background-color: ${({ theme }) => theme.colors.secondary};\n  }\n`;\n","import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const FormStyled = styled(Form)`\n  max-width: 500px;\n  width: 100%;\n  margin: 0 auto;\n`;\n\nexport const Label = styled.label`\n  width: 100%;\n  margin-bottom: 10px;\n  font-weight: ${({ theme }) => theme.fontWeights.bold};\n  color: ${({ theme }) => theme.colors.secondary};\n  height: 22px;\n`;\n\nexport const Input = styled(Field)`\n  width: 100%;\n  margin-top: 10px;\n  margin-bottom: 20px;\n  padding: 10px;\n  outline: none;\n  border: none;\n  border-radius: 3px;\n  border: 1px solid transparent;\n  box-shadow: rgb(0 0 0 / 20%) 0px 3px 1px -2px,\n    rgb(0 0 0 / 14%) 0px 2px 2px 0px, rgb(0 0 0 / 12%) 0px 1px 5px 0px;\n  &.error {\n    border-color: ${({ theme }) => theme.colors.error};\n  }\n`;\n\nexport const InputFeedback = styled.div`\n  color: ${({ theme }) => theme.colors.error};\n  margin-top: -15px;\n  font-size: 14px;\n  margin-bottom: 20px;\n`;\n","export const getItems = state => state.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n","import { Formik, ErrorMessage } from 'formik';\nimport shortid from 'shortid';\nimport * as yup from 'yup';\nimport { Button } from 'components/common/Button.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getItems } from 'store/contacts/contactsSelectors';\nimport { addNewContact } from 'store/contacts/contactsOperations';\nimport { toast } from 'react-toastify';\nimport {\n  FormStyled,\n  Label,\n  Input,\n  InputFeedback,\n} from 'components/common/Form.styled';\n\nconst phoneRegex = RegExp(\n  /\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/\n);\nconst nameRegex = RegExp(\n  /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/\n);\n\nconst mySchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2)\n    .matches(\n      nameRegex,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Name is required'),\n\n  number: yup\n    .string()\n    .length(7)\n    .matches(\n      phoneRegex,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Number is required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const items = useSelector(getItems);\n\n  const normalizedNumber = str => {\n    const normalizedNumber =\n      str[0] + str[1] + str[2] + '-' + str[3] + str[4] + '-' + str[5] + str[6];\n    return normalizedNumber;\n  };\n\n  const contactsCheck = name => {\n    const result = name.name.toLowerCase();\n    const data = items.find(item => item.name.toLowerCase().includes(result));\n    return data;\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    const newName = {\n      id: shortid.generate(),\n      name: values.name,\n      number: normalizedNumber(values.number),\n    };\n\n    if (contactsCheck(newName)) {\n      toast.error(`${newName.name} is already in contacts`);\n    } else {\n      dispatch(addNewContact(newName));\n    }\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={mySchema}\n      onSubmit={handleSubmit}\n    >\n      {props => (\n        <FormStyled>\n          <Label>\n            Name\n            <Input\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Rosie Simpson\"\n              value={props.values.name}\n              onChange={props.handleChange}\n            />\n            <ErrorMessage\n              name=\"name\"\n              render={msg => <InputFeedback>{msg}</InputFeedback>}\n            />\n          </Label>\n          <Label>\n            Number\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"Enter 7 digits\"\n              value={props.values.number}\n              onChange={props.handleChange}\n            />\n            <ErrorMessage\n              name=\"number\"\n              render={msg => <InputFeedback>{msg}</InputFeedback>}\n            />\n          </Label>\n          <Button type=\"submit\">Add contact</Button>\n        </FormStyled>\n      )}\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactListList = styled.ul`\n  list-style-type: none;\n  padding: 0;\n`;\n\nexport const ContactListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 5px;\n`;\n\nexport const ContactsListText = styled.p`\n  margin: 0;\n  width: 100%;\n  font-size: ${({ theme }) => theme.fontSizes.ml};\n  text-transform: capitalize;\n  color: ${({ theme }) => theme.colors.secondary};\n`;\n\nexport const ContactsListButton = styled.button`\n  border: none;\n`;\n","import {\n  ContactListList,\n  ContactListItem,\n  ContactsListText,\n} from './ContactList.styled';\nimport { Button } from 'components/common/Button.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  getCurrentContacts,\n  deleteCurrentContact,\n} from 'store/contacts/contactsOperations';\nimport { getItems, getFilter } from 'store/contacts/contactsSelectors';\nimport { useEffect } from 'react';\n\nexport const ContactList = () => {\n  const filter = useSelector(getFilter);\n  const items = useSelector(getItems);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getCurrentContacts());\n  }, [dispatch]);\n\n  const deleteItems = id => {\n    dispatch(deleteCurrentContact(id));\n  };\n\n  const normalizeContact = filter.toLowerCase();\n  const filteredContacts = items.filter(item =>\n    item.name.toLowerCase().includes(normalizeContact)\n  );\n\n  return (\n    <ContactListList>\n      {filteredContacts.map(({ id, name, number }) => (\n        <ContactListItem key={id}>\n          <ContactsListText>\n            <span>{name}: </span>\n            <span>{number}</span>\n          </ContactsListText>\n          <Button type=\"button\" onClick={() => deleteItems(id)}>\n            Delete\n          </Button>\n        </ContactListItem>\n      ))}\n    </ContactListList>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterFormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n  font-weight: ${props => props.theme.fontWeights.bold};\n  color: ${props => props.theme.colors.secondary};\n`;\n\nexport const FilterLabelTitle = styled.span`\n  font-size: ${props => props.theme.fontSizes.m};\n`;\n\nexport const FilteInput = styled.input`\n  outline: none;\n  border: none;\n  border-radius: 3px;\n  margin-top: 5px;\n  padding: 5px;\n  width: 200px;\n  font-size: ${props => props.theme.fontSizes.m};\n  box-shadow: rgb(0 0 0 / 20%) 0px 3px 1px -2px,\n    rgb(0 0 0 / 14%) 0px 2px 2px 0px, rgb(0 0 0 / 12%) 0px 1px 5px 0px;\n`;\n","import { FilterLabelTitle, FilterFormLabel, FilteInput } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filteredContacts } from 'store/contacts/contactsActions';\nimport { getFilter } from 'store/contacts/contactsSelectors';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleFilter = e => {\n    dispatch(filteredContacts(e.target.value));\n  };\n\n  return (\n    <FilterFormLabel>\n      <FilterLabelTitle>Find contacts by name:</FilterLabelTitle>\n      <FilteInput\n        type=\"text\"\n        placeholder=\"Enter name\"\n        value={filter}\n        onChange={handleFilter}\n      />\n    </FilterFormLabel>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 20px 50px;\n`;\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Container } from 'pages/ContactsPage/ContactsPage.style';\n\nconst Contacts = () => {\n\n  return (\n    <Container>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default Contacts\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n"],"names":["Button","styled","theme","fontSizes","m","colors","primary","white","secondary","FormStyled","Form","Label","fontWeights","bold","Input","Field","error","InputFeedback","getItems","state","contacts","items","getFilter","filter","phoneRegex","RegExp","nameRegex","mySchema","yup","shape","name","min","matches","required","number","length","ContactForm","dispatch","useDispatch","useSelector","normalizedNumber","str","initialValues","validationSchema","onSubmit","values","resetForm","newName","id","shortid","result","toLowerCase","find","item","includes","contactsCheck","addNewContact","toast","props","type","placeholder","value","onChange","handleChange","render","msg","ContactListList","ContactListItem","ContactsListText","ml","ContactList","useEffect","getCurrentContacts","normalizeContact","filteredContacts","map","onClick","deleteCurrentContact","deleteItems","FilterFormLabel","FilterLabelTitle","FilteInput","Filter","e","target","Container","module","exports","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","Error","unique","split","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","counter","previousSeconds","generate","clusterWorkerId","seconds","Date","now","random","format","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","_seed_","mask","log","LN2","step"],"sourceRoot":""}