{"version":3,"file":"static/js/546.4bab6646.chunk.js","mappings":"kRAGaA,GAAkBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,sFAMfE,EAAmBF,EAAAA,GAAAA,MAAH,iIAIZ,qBAAGG,MAAkBC,YAAYC,QACvC,qBAAGF,MAAkBG,OAAOC,aAG1BC,GAAmBR,EAAAA,EAAAA,IAAOS,EAAAA,GAAPT,CAAH,sRAKd,qBAAGG,MAAkBO,UAAUC,KAOjCC,EAAYZ,EAAAA,GAAAA,EAAH,gFACL,qBAAGG,MAAkBC,YAAYS,UC5BrCC,EAASd,EAAAA,GAAAA,OAAH,4bAGJ,qBAAGG,MAAkBO,UAAUC,KAExB,qBAAGR,MAAkBG,OAAOS,WACvC,qBAAGZ,MAAkBG,OAAOU,SAQf,qBAAGb,MAAkBG,OAAOC,a,UChBvCU,EAAW,SAAAC,GAAK,OAAIA,EAAMC,SAASC,OAEnCC,EAAY,SAAAH,GAAK,OAAIA,EAAMC,SAASG,Q,6BCa3CC,EAAaC,OACjB,2EAEIC,EAAYD,OAChB,0HAGIE,EAAWC,EAAAA,KAAaC,MAAM,CAClCC,KAAMF,EAAAA,KAEHG,IAAI,GACJC,QACCN,EACA,0IAEDO,SAAS,oBAEZC,OAAQN,EAAAA,KAELO,OAAO,GACPH,QACCR,EACA,gGAEDS,SAAS,wBAGDG,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACXjB,GAAQkB,EAAAA,EAAAA,IAAYrB,GAEpBsB,EAAmB,SAAAC,GACvB,IAAMD,EACJC,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAK,IAAMA,EAAI,GAAKA,EAAI,GAAK,IAAMA,EAAI,GAAKA,EAAI,GACxE,OAAOD,GAyBT,OACE,SAAC,KAAD,CACEE,cAAe,CAAEZ,KAAM,GAAII,OAAQ,IACnCS,iBAAkBhB,EAClBiB,SApBiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACxBC,EAAU,CACdC,GAAIC,IAAAA,WACJnB,KAAMe,EAAOf,KACbI,OAAQM,EAAiBK,EAAOX,UAVd,SAAAJ,GACpB,IAAMoB,EAASpB,EAAKA,KAAKqB,cAEzB,OADa9B,EAAM+B,MAAK,SAAAC,GAAI,OAAIA,EAAKvB,KAAKqB,cAAcG,SAASJ,MAW7DK,CAAcR,GAGhBV,GAASmB,EAAAA,EAAAA,IAAcT,IAFvBU,EAAAA,GAAAA,MAAA,UAAeV,EAAQjB,KAAvB,4BAKFgB,KAIA,SAKG,SAAAY,GAAK,OACJ,UAAC1D,EAAD,YACE,UAACG,EAAD,mBAEE,SAACM,EAAD,CACEkD,KAAK,OACL7B,KAAK,OACL8B,YAAY,gBACZC,MAAOH,EAAMb,OAAOf,KACpBgC,SAAUJ,EAAMK,gBAElB,SAAC,KAAD,CACEjC,KAAK,OACLkC,OAAQ,SAAAC,GAAG,OAAI,SAACpD,EAAD,UAAYoD,WAG/B,UAAC9D,EAAD,qBAEE,SAACM,EAAD,CACEkD,KAAK,MACL7B,KAAK,SACL8B,YAAY,iBACZC,MAAOH,EAAMb,OAAOX,OACpB4B,SAAUJ,EAAMK,gBAElB,SAAC,KAAD,CACEjC,KAAK,SACLkC,OAAQ,SAAAC,GAAG,OAAI,SAACpD,EAAD,UAAYoD,WAG/B,SAAClD,EAAD,CAAQ4C,KAAK,SAAb,gCC5GGO,EAAkBjE,EAAAA,GAAAA,GAAH,iEAKfkE,EAAkBlE,EAAAA,GAAAA,GAAH,8LAMG,qBAAGG,MAAkBG,OAAOC,aAM9C4D,EAAmBnE,EAAAA,GAAAA,EAAH,uHAGd,qBAAGG,MAAkBO,UAAU0D,MAEnC,qBAAGjE,MAAkBG,OAAOC,a,GAGLP,EAAAA,GAAAA,OAAH,yC,SCblBqE,EAAc,WACzB,IAAM/C,GAASgB,EAAAA,EAAAA,IAAYjB,GACrBD,GAAQkB,EAAAA,EAAAA,IAAYrB,GACpBmB,GAAWC,EAAAA,EAAAA,OAEjBiC,EAAAA,EAAAA,YAAU,WACRlC,GAASmC,EAAAA,EAAAA,SACR,CAACnC,IAEJ,IAIMoC,EAAmBlD,EAAO4B,cAC1BuB,EAAmBrD,EAAME,QAAO,SAAA8B,GAAI,OACxCA,EAAKvB,KAAKqB,cAAcG,SAASmB,MAGnC,OACE,SAACP,EAAD,UACGQ,EAAiBC,KAAI,gBAAG3B,EAAH,EAAGA,GAAIlB,EAAP,EAAOA,KAAMI,EAAb,EAAaA,OAAb,OACpB,UAACiC,EAAD,YACE,UAACC,EAAD,YACE,4BAAOtC,EAAP,SACA,0BAAOI,QAET,SAACnB,EAAD,CAAQ4C,KAAK,SAASiB,QAAS,kBAjBnB,SAAA5B,GAClBX,GAASwC,EAAAA,EAAAA,IAAqB7B,IAgBa8B,CAAY9B,IAAjD,sBALoBA,SCjCjB+B,EAAkB9E,EAAAA,GAAAA,MAAH,iIAIX,SAAAyD,GAAK,OAAIA,EAAMtD,MAAMC,YAAYC,QACvC,SAAAoD,GAAK,OAAIA,EAAMtD,MAAMG,OAAOC,aAG1BwE,EAAmB/E,EAAAA,GAAAA,KAAH,2CACd,SAAAyD,GAAK,OAAIA,EAAMtD,MAAMO,UAAUC,KAGjCqE,EAAahF,EAAAA,GAAAA,MAAH,sRAOR,SAAAyD,GAAK,OAAIA,EAAMtD,MAAMO,UAAUC,K,UChBjCsE,EAAS,WACpB,IAAM3D,GAASgB,EAAAA,EAAAA,IAAYjB,GACrBe,GAAWC,EAAAA,EAAAA,MAMjB,OACE,UAACyC,EAAD,YACE,SAACC,EAAD,sCACA,SAACC,EAAD,CACEtB,KAAK,OACLC,YAAY,aACZC,MAAOtC,EACPuC,SAXe,SAAAqB,GACnB9C,GAASqC,EAAAA,EAAAA,GAAiBS,EAAEC,OAAOvB,eCR1BwB,EAAYpF,EAAAA,GAAAA,IAAH,+CCetB,EAZiB,WAEf,OACE,UAACoF,EAAD,YACE,SAACjD,EAAD,KACA,sCACA,SAAC8C,EAAD,KACA,SAACZ,EAAD","sources":["components/Form/Form.styled.js","components/common/Button.styled.js","store/contacts/contactsSelectors.js","components/Form/Form.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.style.js","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const ContactFormForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 200px;\n`;\n\nexport const ContactFormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n  font-weight: ${({ theme }) => theme.fontWeights.bold};\n  color: ${({ theme }) => theme.colors.secondary};\n`;\n\nexport const ContactFormInput = styled(Field)`\n  outline: none;\n  margin-top: 5px;\n  padding: 5px;\n  width: 200px;\n  font-size: ${({ theme }) => theme.fontSizes.m};\n  border: none;\n  border-radius: 3px;\n  box-shadow: rgb(0 0 0 / 20%) 0px 3px 1px -2px,\n    rgb(0 0 0 / 14%) 0px 2px 2px 0px, rgb(0 0 0 / 12%) 0px 1px 5px 0px;\n`;\n\nexport const ErrorText = styled.p`\n  font-weight: ${({ theme }) => theme.fontWeights.normal};\n  font-size: 14px;\n  color: red;\n`;\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  padding: 5px 10px;\n  margin: 5px 10px;\n  font-size: ${({ theme }) => theme.fontSizes.m};\n  text-transform: capitalize;\n  background-color: ${({ theme }) => theme.colors.primary};\n  color: ${({ theme }) => theme.colors.white};\n  border: none;\n  border-radius: 5px;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1) 0s;\n  box-shadow: rgb(0 0 0 / 20%) 0px 3px 1px -2px,\n    rgb(0 0 0 / 14%) 0px 2px 2px 0px, rgb(0 0 0 / 12%) 0px 1px 5px 0px;\n  cursor: pointer;\n  :hover {\n    background-color: ${({ theme }) => theme.colors.secondary};\n  }\n`;\n","export const getItems = state => state.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n","import { Formik, ErrorMessage } from 'formik';\nimport shortid from 'shortid';\nimport * as yup from 'yup';\nimport {\n  ContactFormForm,\n  ContactFormLabel,\n  ContactFormInput,\n  ErrorText,\n} from './Form.styled';\nimport { Button } from 'components/common/Button.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getItems } from 'store/contacts/contactsSelectors';\nimport { addNewContact } from 'store/contacts/contactsOperations';\nimport { toast } from \"react-toastify\";\n\nconst phoneRegex = RegExp(\n  /\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/\n);\nconst nameRegex = RegExp(\n  /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/\n);\n\nconst mySchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2)\n    .matches(\n      nameRegex,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Name is required'),\n\n  number: yup\n    .string()\n    .length(7)\n    .matches(\n      phoneRegex,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Number is required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const items = useSelector(getItems);\n\n  const normalizedNumber = str => {\n    const normalizedNumber =\n      str[0] + str[1] + str[2] + '-' + str[3] + str[4] + '-' + str[5] + str[6];\n    return normalizedNumber;\n  };\n\n  const contactsCheck = name => {\n    const result = name.name.toLowerCase();\n    const data = items.find(item => item.name.toLowerCase().includes(result));\n    return data;\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    const newName = {\n      id: shortid.generate(),\n      name: values.name,\n      number: normalizedNumber(values.number),\n    };\n\n    if (contactsCheck(newName)) {\n      toast.error(`${newName.name} is already in contacts`);\n    } else {\n      dispatch(addNewContact(newName));\n    }\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={mySchema}\n      onSubmit={handleSubmit}\n    >\n      {props => (\n        <ContactFormForm>\n          <ContactFormLabel>\n            Name\n            <ContactFormInput\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Rosie Simpson\"\n              value={props.values.name}\n              onChange={props.handleChange}\n            />\n            <ErrorMessage\n              name=\"name\"\n              render={msg => <ErrorText>{msg}</ErrorText>}\n            />\n          </ContactFormLabel>\n          <ContactFormLabel>\n            Number\n            <ContactFormInput\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"Enter 7 digits\"\n              value={props.values.number}\n              onChange={props.handleChange}\n            />\n            <ErrorMessage\n              name=\"number\"\n              render={msg => <ErrorText>{msg}</ErrorText>}\n            />\n          </ContactFormLabel>\n          <Button type=\"submit\">Add contact</Button>\n        </ContactFormForm>\n      )}\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactListList = styled.ul`\n  list-style-type: none;\n  padding: 0;\n`;\n\nexport const ContactListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 5px;\n  &:not(:last-child) {\n    border-bottom: 1px solid ${({ theme }) => theme.colors.secondary};\n  }\n  \n  \n`;\n\nexport const ContactsListText = styled.p`\n  margin: 0;\n  width: 100%;\n  font-size: ${({ theme }) => theme.fontSizes.ml};\n  text-transform: capitalize;\n  color: ${({ theme }) => theme.colors.secondary};\n`;\n\nexport const ContactsListButton = styled.button`\n  border: none;\n`;\n","import {\n  ContactListList,\n  ContactListItem,\n  ContactsListText,\n} from './ContactList.styled';\nimport { Button } from 'components/common/Button.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  getCurrentContacts,\n  deleteCurrentContact,\n} from 'store/contacts/contactsOperations';\nimport { getItems, getFilter } from 'store/contacts/contactsSelectors';\nimport { useEffect } from 'react';\n\nexport const ContactList = () => {\n  const filter = useSelector(getFilter);\n  const items = useSelector(getItems);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getCurrentContacts());\n  }, [dispatch]);\n\n  const deleteItems = id => {\n    dispatch(deleteCurrentContact(id));\n  };\n\n  const normalizeContact = filter.toLowerCase();\n  const filteredContacts = items.filter(item =>\n    item.name.toLowerCase().includes(normalizeContact)\n  );\n\n  return (\n    <ContactListList>\n      {filteredContacts.map(({ id, name, number }) => (\n        <ContactListItem key={id}>\n          <ContactsListText>\n            <span>{name}: </span>\n            <span>{number}</span>\n          </ContactsListText>\n          <Button type=\"button\" onClick={() => deleteItems(id)}>\n            Delete\n          </Button>\n        </ContactListItem>\n      ))}\n    </ContactListList>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterFormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n  font-weight: ${props => props.theme.fontWeights.bold};\n  color: ${props => props.theme.colors.secondary};\n`;\n\nexport const FilterLabelTitle = styled.span`\n  font-size: ${props => props.theme.fontSizes.m};\n`;\n\nexport const FilteInput = styled.input`\n  outline: none;\n  border: none;\n  border-radius: 3px;\n  margin-top: 5px;\n  padding: 5px;\n  width: 200px;\n  font-size: ${props => props.theme.fontSizes.m};\n  box-shadow: rgb(0 0 0 / 20%) 0px 3px 1px -2px,\n    rgb(0 0 0 / 14%) 0px 2px 2px 0px, rgb(0 0 0 / 12%) 0px 1px 5px 0px;\n`;\n","import { FilterLabelTitle, FilterFormLabel, FilteInput } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filteredContacts } from 'store/contacts/contactsActions';\nimport { getFilter } from 'store/contacts/contactsSelectors';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleFilter = e => {\n    dispatch(filteredContacts(e.target.value));\n  };\n\n  return (\n    <FilterFormLabel>\n      <FilterLabelTitle>Find contacts by name:</FilterLabelTitle>\n      <FilteInput\n        type=\"text\"\n        placeholder=\"Enter name\"\n        value={filter}\n        onChange={handleFilter}\n      />\n    </FilterFormLabel>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 20px 50px;\n`;\n","import { ContactForm } from 'components/Form/Form';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Container } from 'pages/ContactsPage/ContactsPage.style';\n\nconst Contacts = () => {\n\n  return (\n    <Container>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default Contacts\n"],"names":["ContactFormForm","styled","Form","ContactFormLabel","theme","fontWeights","bold","colors","secondary","ContactFormInput","Field","fontSizes","m","ErrorText","normal","Button","primary","white","getItems","state","contacts","items","getFilter","filter","phoneRegex","RegExp","nameRegex","mySchema","yup","shape","name","min","matches","required","number","length","ContactForm","dispatch","useDispatch","useSelector","normalizedNumber","str","initialValues","validationSchema","onSubmit","values","resetForm","newName","id","shortid","result","toLowerCase","find","item","includes","contactsCheck","addNewContact","toast","props","type","placeholder","value","onChange","handleChange","render","msg","ContactListList","ContactListItem","ContactsListText","ml","ContactList","useEffect","getCurrentContacts","normalizeContact","filteredContacts","map","onClick","deleteCurrentContact","deleteItems","FilterFormLabel","FilterLabelTitle","FilteInput","Filter","e","target","Container"],"sourceRoot":""}